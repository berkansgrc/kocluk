rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Allow users to be created by the admin backend
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isSignedIn(); 
    }

    // Students can read/write their own data
    // Admins can read all student data
    match /students/{studentId} {
      allow read, update, delete: if isOwner(studentId) || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow create: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Students can only read and create their own exam results
    // Admins can read all results
    match /examResults/{docId} {
      allow get: if isSignedIn() && (isOwner(resource.data.userId) || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow list: if isSignedIn() && (request.query.where.size() == 1 && request.query.where[0].field == "userId" && request.query.where[0].value == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
    }
    
    // All authenticated users can read the list of subjects and topics
    match /subjects/{subjectId} {
       allow read: if isSignedIn();
       allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}