rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for admin role
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Students can read/write their own data
    match /students/{studentId} {
      allow read, write: if request.auth != null && (request.auth.uid == studentId || isAdmin());
    }
    
    // Users collection to manage roles
    match /users/{userId} {
      // Admins can read any user doc. Users can only read their own.
      allow get: if request.auth != null && (isAdmin() || request.auth.uid == userId);
      // Admins can create/update user roles
      allow write: if isAdmin();
    }

    // Subjects collection is readable by all authenticated users, but writable only by admins
    match /subjects/{subjectId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // ExamResults collection rules
    match /examResults/{resultId} {
      // Allow a user to create a result if they are authenticated.
      allow create: if request.auth != null;
      
      // Allow a user to read a specific result document if they are an admin or if the document's userId matches their own.
      allow get: if request.auth != null && (isAdmin() || request.auth.uid == resource.data.userId);
      
      // Allow a user to list (query) results if they are an admin, OR if they are querying for their own documents.
      allow list: if request.auth != null && (isAdmin() || request.query.where.get('userId', '') == request.auth.uid);
      
      // Prevent updates and deletes for now to maintain data integrity.
      allow update, delete: if false;
    }
  }
}
